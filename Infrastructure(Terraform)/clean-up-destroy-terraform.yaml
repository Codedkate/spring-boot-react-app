trigger: none  
pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: azureServiceConnection
    value: 'Visual Studio Enterprise Subscription (5f45be49-91c7-4b3d-9055-dbb5e3a79364)'
  - name: resourceGroupName
    value: 'springapprg'
  - name: aksClusterName
    value: 'springcluster1'

steps:
- task: TerraformInstaller@0
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: '1.3.0'  # Specify the version of Terraform you want to use

- task: AzureCLI@2
  displayName: 'Azure CLI - Login'
  inputs:
    azureSubscription: '$(azureServiceConnection)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az account show

- task: Bash@3
  displayName: 'Terraform Init'
  inputs:
    targetType: 'inline'
    script: |
      terraform init

- task: Bash@3
  displayName: 'Terraform Plan to Destroy'
  inputs:
    targetType: 'inline'
    script: |
      terraform plan -destroy -out=tfplan

- task: Bash@3
  displayName: 'Terraform Apply Destroy'
  inputs:
    targetType: 'inline'
    script: |
      terraform apply -destroy "tfplan"
    failOnStderr: false

- task: AzureCLI@2
  displayName: 'Cleanup - Delete Resource Group'  # Optional step to clean up the resource group
  condition: succeededOrFailed()
  inputs:
    azureSubscription: '$(azureServiceConnection)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az group delete --name $(resourceGroupName) --yes --no-wait
